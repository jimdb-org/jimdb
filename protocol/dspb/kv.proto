syntax = "proto3";

package dspb;

enum RedisCmdType {
    //db
    DEL                 = 0;
    EXISTS              = 1;
    EXPIRE              = 2;
    EXPIREAT            = 3;
    PERSIST             = 4;
    PEXPIRE             = 5;
    PEXPIREAT           = 6;
    PTTL                = 7;
    SORT                = 8;
    TTL                 = 9;
    TYPE                = 10;
    SCAN                = 11;
    DUMP                = 12;
    RESTORE             = 13;
    OBJECT              = 14;
    //string
    APPEND              = 15;
    BITCOUNT            = 16;
    BITOP               = 17;
    BITPOS              = 18;
    DECR                = 19;
    DECRBY              = 20;
    GET                 = 21;
    GETBIT              = 22;
    GETRANGE            = 23;
    SUBSTR              = 24;
    GETSET              = 25;
    INCR                = 26;
    INCRBY              = 27;
    INCRBYFLOAT         = 28;
    MGET                = 29;
    MSET                = 30;
    MSETNX              = 31;
    PSETEX              = 32;
    SET                 = 33;
    SETBIT              = 34;
    SETEX               = 35;
    SETNX               = 36;
    SETRANGE            = 37;
    STRLEN              = 38;
    //hash
    HDEL                = 39;
    HEXISTS             = 40;
    HGET                = 41;
    HGETALL             = 42;
    HINCRBY             = 43;
    HINCRBYFLOAT        = 44;
    HKEYS               = 45;
    HLEN                = 46;
    HSTRLEN             = 47;
    HMGET               = 48;
    HMSET               = 49;
    HSET                = 50;
    HSETNX              = 51;
    HVALS               = 52;
    HSCAN               = 53;
    //list
    BLPOP               = 54;
    BRPOP               = 55;
    BRPOPLPUSH          = 56;
    LINDEX              = 57;
    LINSERT             = 58;
    LLEN                = 59;
    LPOP                = 60;
    LPUSH               = 61;
    LPUSHX              = 62;
    LRANGE              = 63;
    LREM                = 64;
    LSET                = 65;
    LTRIM               = 66;
    RPOP                = 67;
    RPOPLPUSH           = 68;
    RPUSH               = 69;
    RPUSHX              = 70;
    //set
    SADD                = 71;
    SCARD               = 72;
    SDIFF               = 73;
    SDIFFSTORE          = 74;
    SINTER              = 75;
    SINTERSTORE         = 76;
    SISMEMBER           = 77;
    SMEMBERS            = 78;
    SMOVE               = 79;
    SPOP                = 80;
    SRANDMEMBER         = 81;
    SREM                = 82;
    SUNION              = 83;
    SUNIONSTORE         = 84;
    SSCAN               = 85;
    //zset
    ZADD                = 86;
    ZCARD               = 87;
    ZCOUNT              = 88;
    ZINCRBY             = 89;
    ZRANGE              = 90;
    ZRANGEBYSCORE       = 91;
    ZRANK               = 92;
    ZREM                = 93;
    ZREMRANGEBYRANK     = 94;
    ZREMRANGEBYSCORE    = 95;
    ZREVRANGE           = 96;
    ZREVRANGEBYSCORE    = 97;
    ZREVRANK            = 98;
    ZSCORE              = 99;
    ZUNIONSTORE         = 100;
    ZINTERSTORE         = 101;
    ZSCAN               = 102;
    ZRANGEBYLEX         = 103;
    ZLEXCOUNT           = 104;
    ZREMRANGEBYLEX      = 105;
    PFADD               = 106;
    PFCOUNT             = 107;
    PFMERGE             = 108;
    PFSELFTEST          = 109;
    PFDEBUG             = 110;
    DISCARD             = 111;
    EXEC                = 112;
    MULTI               = 113;
    UNWATCH             = 114;
    WATCH               = 115;
    EVAL                = 116;
    EVALSHA             = 117;
    SCRIPT              = 118;
    AUTH                = 119;
    PING                = 120;
    CLIENT              = 121;
    CONFIG              = 122;
    DBSIZE              = 123;
    DEBUG               = 124;
    FLUSHALL            = 125;
    INFO                = 126;
    SLOWLOG             = 127;
    TIME                = 128;
    CLEAREXPIRED        = 129;
}

enum RedisReplyType {
    STATUS              = 0;
    INTEGER             = 1;
    STRING              = 2;
    ERROR               = 3;
    NIL                 = 4;
    ARRAY               = 5;
}

enum RedisType {
    TSTRING              = 0;
    TLIST                = 1;
    TSET                 = 2;
    TZSET                = 3;
    THASH                = 4;
}

enum CFType {
    CF_DEFAULT = 0;
    CF_TXN = 1;
    CF_EXPIRED = 2;
}

message KvValue {
    bytes key               = 1;
    bytes value             = 2;
}

message KeyRange {
    bytes start_key = 1;
    bytes end_key   = 2;
}

message RedisMeta {
    RedisType   type        = 1;
    uint64      expire      = 2;
    uint64      access_time = 3;
    uint64      size        = 4;
    uint64      next_seq    = 5; //next element sequence of list
    uint64      first_seq   = 6; //first element sequence of list
    uint64      last_seq    = 7; //last element sequence of list
    oneof       value {
    int64       integer     = 8;
    bytes       str         = 9;
    }
}

message RedisRequest {
    RedisCmdType type   = 1;
    repeated bytes args = 2;
}

message RedisObject {
    uint64 prev_seq = 1;
    uint64 next_seq = 2;
    oneof value {
        int64 integer = 3;
        bytes string  = 4;
    }
}


message RedisResponse {
    RedisReplyType type = 1;
    bytes str = 2;
    int32 integer = 3;
    repeated RedisResponse elements = 4;
}


message RedisMutation {
    message Item {
        CFType cf = 1;
        oneof mut {
            KvValue put_kv = 2;
            bytes del_key = 3;
            KeyRange del_range = 4;
        }
    };
    repeated Item muts = 1;
}

// KvGet
message KvGetRequest {
    bytes key               = 1;
}

message KvGetResponse {
    int32 code              = 1;
    bytes value             = 2;
}



// KvScanRequest
message KvScanRequest {
    bytes start_key         = 1;
    bytes end_key           = 2;
}

message KvScanReponse {
    int32 code              = 1;
    repeated KvValue values = 2;
}

// KvPut
message KvPutRequest {
    bytes key               = 1;
    bytes value             = 2;
}

message KvPutResponse {
    int32 code              = 1;
}


// KvDelete
message KvDeleteRequest {
    bytes key               = 1;
}

message KvDeleteResponse {
    int32  code             = 1;
}

// KvDeleteRange
message KvDelRangeRequest {
    bytes start_key         = 1;
    bytes end_key           = 2;
}

message KvDelRangeResponse {
    int32 code              = 1;
    int64 count             = 2;
}

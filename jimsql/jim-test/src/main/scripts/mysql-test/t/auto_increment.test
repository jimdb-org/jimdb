# This testcase is an auto increment feature specific, to Myisam
# All tests are required to run with Myisam
# Hence MTR starts mysqld with MyISAM as default

#--source include/force_myisam_default.inc
#--source include/have_myisam.inc

#
# Test of auto_increment;  The test for BDB tables is in bdb.test
#
--disable_warnings
drop table if exists t1;
drop table if exists t2;
--enable_warnings
#SET SQL_WARNINGS=1;

#create table t1 (a int not null auto_increment,b int, primary key (a)) engine=myisam auto_increment=3;
create table t1 (a bigint UNSIGNED not null  auto_increment,b int, primary key (a)) COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=3;
#error 错误
#insert into t1 values (1,1),(NULL,3),(NULL,4);
#delete from t1 where a=4;
#insert into t1 values (NULL,5),(NULL,6);
#select * from t1;
#delete from t1 where a=6;
#show table status like "t1";
#replace t1 values (3,1);
#ALTER TABLE t1 add c int;
#replace t1 values (3,3,3);
#insert into t1 values (NULL,7,7);
#update t1 set a=8,b=b+1,c=c+1 where a=7;
#insert into t1 values (NULL,9,9);
#select * from t1;
drop table t1;

create table t1 (
  skey bigint unsigned NOT NULL auto_increment PRIMARY KEY,
  sval char(20)
)COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=3;
insert into t1 values (1, "hello");
insert into t1 values (2, "hey");
select * from t1;
#error错误
#select _rowid,t1._rowid,skey,sval from t1;
drop table t1;

#
# Test auto_increment on sub key
#
#create table t1 (a char(10) not null, b int not null auto_increment, primary key(a,b));
create table t1 (a char(10) not null, b bigint UNSIGNED not null auto_increment, primary key(b)) COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=3;
insert into t1 values ("a",10),("b",20),("a",30),("c",40);
insert into t1 values ("a",50),("b",60),("c",70),("e",80);
insert into t1 (a) values ("a"),("b"),("c"),("d");
insert into t1 (a) values ('k'),('d');
insert into t1 (a) values ("a");
#insert into t1 values ("d",last_insert_id());
select * from t1;
drop table t1;

create table t1 (ordid bigint(8) UNSIGNED not null auto_increment, ord  varchar(50) not null, primary key (ordid), index(ord))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=3;
#create table t1 (ordid bigint(8) UNSIGNED not null auto_increment, ord  varchar(50) not null, primary key (ordid), index(ord,ordid))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=3;
insert into t1 (ordid,ord) values (1,'sdj'),(2,'sdj');
select * from t1;
drop table t1;

create table t1 (ordid   bigint(8) UNSIGNED not null auto_increment, ord  varchar(50) not null, primary key (ordid)) COMMENT REPLICA=1 ENGINE=memory;
insert into t1 values (1,'sdj'),(2,'sdj'),(3,"abc"),(4,'abc'),(5,'zzz'),(6,'sdj'),(7,'abc');
select * from t1;
drop table t1;

#create table t1 (sid char(5), id bigint(2) UNSIGNED NOT NULL auto_increment, key(sid,  id))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=3;
create table t1 (sid char(5), id bigint(2) UNSIGNED NOT NULL auto_increment, primary key(id))COMMENT REPLICA=1 ENGINE=memory ;
create table t2 (sid char(20), id bigint(2)UNSIGNED NOT NULL auto_increment, primary key(id))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=3;
insert into t2 values ('skr',1),('skr',2),('test',3);
#insert into t1 select * from t2;
select * from t1;
drop table t1,t2;

#
# Test of auto_increment columns when they are set to 0
#

create table t1 (a bigint UNSIGNED not null primary key auto_increment)COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=3;
insert into t1 values (0);
#error 错误不支持全量更新
#update t1 set a=0;
select * from t1;
#error 错误不支持
#check table t1;
drop table t1;

#
# Test negative values (Bug #1366)
#

create table t1 (a bigint UNSIGNED not null auto_increment primary key)COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=3;
insert into t1 values (1);
#error 错误
#insert into t1 values (-1);
#select last_insert_id();

insert into t1 values (2);
select * from t1;
drop table t1;

#create table t1 (a int not null auto_increment primary key) /*!40102 engine=heap */;
create table t1 (a bigint UNSIGNED not null auto_increment primary key) COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=3;
insert into t1 values (1);
#insert into t1 values (-1);
#select last_insert_id();
insert into t1 values (2);
select * from t1;
drop table t1;
#
# last_insert_id() madness
#
#SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
create table t1 (i bigint unsigned not null auto_increment primary key)COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=3;
insert into t1 set i = 254;
insert into t1 set i = null;
#select last_insert_id();
#explain extended select last_insert_id();
#--error ER_DUP_ENTRY
insert into t1 set i = 256;
#select last_insert_id();
#--error ER_DUP_ENTRY
insert into t1 set i = null;
#select last_insert_id();
drop table t1;

create table t1 (i bigint unsigned not null auto_increment, primary key (i))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=3;
insert into t1 set i = 254;
insert into t1 set i = null;
#select last_insert_id();
insert into t1 set i = null;
#select last_insert_id();
drop table t1;

create table t1 (i bigint unsigned not null auto_increment primary key, b int, unique (b))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
insert into t1 values (NULL, 10);
#select last_insert_id();
insert into t1 values (NULL, 15);
#select last_insert_id();
#--error ER_DUP_ENTRY
#insert into t1 values (NULL, 10);
#select last_insert_id();

drop table t1;
SET sql_mode = default;

create table t1(a bigint unsigned auto_increment,b int null,primary key(a))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=100;
#SET SQL_MODE=NO_AUTO_VALUE_ON_ZERO;
insert into t1(a,b)values(1,1);
insert into t1(a,b)values(200,2);
insert into t1(a,b)values(0,3);
insert into t1(b)values(4);
insert into t1(b)values(5);
insert into t1(b)values(6);
insert into t1(b)values(7);
select * from t1 order by b;
#alter table t1 modify b mediumint;
#select * from t1 order by b;
create table t2 (a int primary key)COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=100;
insert t2 values (1),(2);
#alter table t2 add b int auto_increment primary key;
#select * from t2;
drop table t2;
delete from t1 where a=0;
#error 报错
#update t1 set a=0 where b=5;
select * from t1 order by b;
delete from t1 where a=0;
#update t1 set a=NULL where b=6;
#update t1 set a=300 where b=7;
#SET SQL_MODE='';
#insert into t1(a,b)values(100,800);
insert into t1(a,b)values(400,9);
insert into t1(a,b)values(0,10);
insert into t1(b)values(11);
insert into t1(b)values(12);
insert into t1(b)values(13);
insert into t1(b)values(14);
select * from t1 order by b;
delete from t1 where a=0;
#pdate t1 set a=0 where b=12;
select * from t1 order by b;
delete from t1 where a=0;
#update t1 set a=NULL where b=13;
#update t1 set a=500 where b=14;
select * from t1 order by b;
drop table t1;

#
# Test of behavior of ALTER TABLE when coulmn containing NULL or zeroes is
# converted to AUTO_INCREMENT column
#
create table t1 (a bigint primary key)COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
#insert into t1 values (1), (2), (3), (NULL), (NULL);
#alter table t1 modify a bigint not null auto_increment primary key;
select * from t1;
drop table t1;

create table t1 (a bigint primary key)COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
insert into t1 values (1), (2), (3), (0), (0);
#alter table t1 modify a bigint not null auto_increment primary key;
select * from t1;
drop table t1;

# We still should be able to preserve zero in NO_AUTO_VALUE_ON_ZERO mode
create table t1 (a bigint primary key)COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
insert into t1 values (0), (1), (2), (3);
#set sql_mode=NO_AUTO_VALUE_ON_ZERO;
#alter table t1 modify a bigint not null auto_increment primary key;
set sql_mode= '';
select * from t1;
drop table t1;

# It also sensible to preserve zeroes if we are converting auto_increment
# column to auto_increment column (or not touching it at all, which is more
# common case probably)
create table t1 (a bigint unsigned auto_increment primary key , b int null)COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
#set sql_mode=NO_AUTO_VALUE_ON_ZERO;
insert into t1 values (0,1),(1,2),(2,3);
select * from t1;
#set sql_mode= '';
#alter table t1 modify b varchar(255);
insert into t1 values (10,4);
select * from t1;
drop table t1;

#
# BUG #10045: Problem with composite AUTO_INCREMENT + BLOB key

CREATE TABLE t1 ( a bigINT unsigned AUTO_INCREMENT, b BLOB, PRIMARY KEY (a))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
INSERT INTO t1 (b) VALUES ('aaaa');
#CHECK TABLE t1;
INSERT INTO t1 (b) VALUES ('');
#CHECK TABLE t1;
INSERT INTO t1 (b) VALUES ('bbbb');
#CHECK TABLE t1;
DROP TABLE IF EXISTS t1;

# BUG #19025:

CREATE TABLE `t1` (
    t1_name VARCHAR(255) DEFAULT NULL,
    t1_id bigINT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
    KEY (t1_name),
    PRIMARY KEY (t1_id)
) COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;

INSERT INTO t1 (t1_name) VALUES('MySQL');
INSERT INTO t1 (t1_name) VALUES('MySQL');
INSERT INTO t1 (t1_name) VALUES('MySQL');

SELECT * from t1;

#SHOW CREATE TABLE `t1`;

DROP TABLE `t1`;

#
# Bug #6880: LAST_INSERT_ID() within a statement
#

create table t1(a bigint unsigned not null auto_increment primary key)COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=10;
create table t2(a bigint unsigned not null auto_increment primary key, t1a int)COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=10;
insert into t1 values(NULL);
#insert into t2 values (NULL, LAST_INSERT_ID()), (NULL, LAST_INSERT_ID());
insert into t1 values (1);
#insert into t2 values (NULL, LAST_INSERT_ID()), (NULL, LAST_INSERT_ID()),
#(NULL, LAST_INSERT_ID());
insert into t1 values (NULL);
#insert into t2 values (NULL, LAST_INSERT_ID()), (NULL, LAST_INSERT_ID()),
#(NULL, LAST_INSERT_ID()), (NULL, LAST_INSERT_ID());
#select * from t2;
drop table t1, t2;

--echo End of 4.1 tests

#
# Bug #11080 & #11005  Multi-row REPLACE fails on a duplicate key error
#

CREATE TABLE t1 ( `a` bigint(11) unsigned NOT NULL auto_increment, `b` int(11) default NULL,PRIMARY KEY  (`a`),UNIQUE KEY `b` (`b`))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
insert into t1 (b) values (1);
#replace into t1 (b) values (2), (1), (3);
select * from t1;
#truncate table t1;
insert into t1 (b) values (10);
#replace into t1 (b) values (2);
#replace into t1 (b) values (1);
#replace into t1 (b) values (3);
select * from t1;
drop table t1;

create table t1 (rowid bigint unsigned not null auto_increment, val int not null,primary
key (rowid), unique(val))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
#replace into t1 (val) values ('1'),('2');
#replace into t1 (val) values ('1'),('2');
#--error ER_DUP_ENTRY
insert into t1 (val) values ('1'),('2');
select * from t1;
drop table t1;

#
# Test that update changes internal auto-increment value
#

create table t1 (a bigint unsigned not null auto_increment primary key, val int)COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
insert into t1 (val) values (1);
#update t1 set a=2 where a=1;
insert into t1 (val) values (1);
select * from t1;
drop table t1;

#
# Test key duplications with auto-increment in ALTER TABLE
# bug #14573
#
CREATE TABLE t1 (t1 bigINT(10) PRIMARY KEY, t2 INT(10))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
INSERT INTO t1 VALUES(0, 0);
INSERT INTO t1 VALUES(1, 1);
#--error ER_DUP_ENTRY
#ALTER TABLE t1 CHANGE t1 t1 INT(10) auto_increment;
DROP TABLE t1;

# Test of REPLACE when it does INSERT+DELETE and not UPDATE:
# see if it sets LAST_INSERT_ID() ok
create table t1 (a bigint unsigned primary key auto_increment, b int, c int, d timestamp default current_timestamp, unique(b),unique(c))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
insert into t1 values(null,1,1,now());
insert into t1 values(null,0,0,null);
# this will delete two rows
#replace into t1 values(null,1,0,null);
#select last_insert_id();
drop table t1;

# Test of REPLACE when it does a INSERT+DELETE for all the conflicting rows
# (i.e.) when there are three rows conflicting in unique key columns with
# a row that is being inserted, all the three rows will be deleted and then
# the new rows will be inserted.
create table t1 (a bigint unsigned primary key auto_increment, b int, c int, e int, d timestamp default current_timestamp, unique(b),unique(c),unique(e))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
insert into t1 values(null,1,1,1,now());
insert into t1 values(null,0,0,0,null);
#replace into t1 values(null,1,0,2,null);
#select last_insert_id();
drop table t1;

--echo #
--echo # Bug#46616: Assertion `!table->auto_increment_field_not_null' on view
--echo # manipulations
--echo #
CREATE TABLE t1 ( a INT primary key)COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
INSERT INTO t1 VALUES (1), (1);

CREATE TABLE t2 ( a bigINT unsigned AUTO_INCREMENT primary KEY )COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
#--error ER_DUP_ENTRY
#INSERT INTO t2 SELECT a FROM t1;

#UPDATE t2 SET a = 2;

SELECT a FROM t2;

DROP TABLE t1, t2;

--echo #
--echo # Bug#39828 autoinc wraps around when offset and increment > 1
--echo #

CREATE TABLE t1 (c1 BIGINT UNSIGNED AUTO_INCREMENT, PRIMARY KEY(c1)) COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
INSERT INTO t1 VALUES(1);
INSERT INTO t1 VALUES (18446744073709551601);

#SET @@SESSION.AUTO_INCREMENT_INCREMENT=10;

#SELECT @@SESSION.AUTO_INCREMENT_OFFSET;
#--error ER_WARN_DATA_OUT_OF_RANGE
#INSERT INTO t1 VALUES (NULL), (NULL), (NULL);
SELECT * FROM t1;

#SET @@SESSION.AUTO_INCREMENT_INCREMENT=default;
#SET @@SESSION.AUTO_INCREMENT_OFFSET=default;

DROP TABLE t1;

--echo End of 5.1 tests

--echo #
--echo # Bug#50619 assert in handler::update_auto_increment
--echo #

CREATE TABLE t1 (pk bigINT UNSIGNED AUTO_INCREMENT, PRIMARY KEY (pk))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
# This triggered the assert
#INSERT INTO t1 VALUES (NULL), (-1), (NULL);
SELECT * FROM t1;
DROP TABLE t1;

# Check that that true overflow still gives error
CREATE TABLE t1 (pk BIGINT UNSIGNED AUTO_INCREMENT, PRIMARY KEY (pk))COMMENT REPLICA=1 ENGINE=memory AUTO_INCREMENT=1;
#--error ER_AUTOINC_READ_FAILED
#INSERT INTO t1 VALUES (NULL), (18446744073709551615-1), (NULL);
SELECT * FROM t1;
DROP TABLE t1;

#
# Copyright 2019 The JIMDB Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
opts.memory=${jvm.memory} -server -XX:-RestrictContended -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+TieredCompilation -XX:CICompilerCount=3 -XX:InitialCodeCacheSize=64m -XX:ReservedCodeCacheSize=2048m -XX:CompileThreshold=1000 -XX:FreqInlineSize=2048 -XX:MaxInlineSize=512 -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSParallelRemarkEnabled -XX:SoftRefLRUPolicyMSPerMB=0 -XX:CMSMaxAbortablePrecleanTime=100 -XX:+PrintGCDetails -Xloggc:${logger.path}/gc.log -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses -XX:+PrintGCTimeStamps

#JIM
jim.outbound.threads=${jim.outbound.threads}
jim.inbound.threads=${jim.inbound.threads}
jim.plugin.routerstore=${jim.plugin.routerstore}
jim.plugin.metastore=${jim.plugin.metastore}
jim.plugin.sqlengine=${jim.plugin.sqlengine}
jim.plugin.sqlexecutor=${jim.plugin.sqlexecutor}
jim.plugin.storeengine=${jim.plugin.storeengine}
jim.plugin.privilege=${jim.plugin.privilege}

#元数据http地址
jim.master.address=${jim.master.address}
jim.meta.store.address=${jim.meta.store.address}
jim.meta.cluster=${jim.meta.cluster}
jim.meta.lease=${jim.meta.lease}
jim.meta.prvilege.lease=${jim.meta.prvilege.lease}
jim.meta.prvilege.store=${jim.meta.prvilege.store}
jim.meta.prvilege.replica=${jim.meta.prvilege.replica}
jim.rowid.step=${jim.rowid.step}

jim.reactor.debug=${jim.reactor.debug}
#0:DISABLED,1:SIMPLE,2:ADVANCED,3:PARANOID
jim.netty.leak=${jim.netty.leak}

#cbo switch
jim.sql.optimizer.stats.pushdown=false
jim.sql.optimizer.stats.enable=false

####################### Netty Server ##################################################
#服务IP
netty.server.host=${netty.server.host}
#服务端口
netty.server.port=${netty.server.port}
#连接请求最大队列长度，如果队列满时收到连接指示，则拒绝该连接。
netty.server.backlog=${netty.server.backlog}
#默认发送数据包超时时间，默认5秒
netty.server.sendTimeout=${netty.server.sendTimeout}
#Selector线程
netty.server.bossThreads=${netty.server.bossThreads}
#IO线程, 0=cpu num
netty.server.ioThreads=${netty.server.ioThreads}
#通道最大空闲时间(毫秒)
netty.server.maxIdle=${netty.server.maxIdle}
#socket读超时时间(毫秒)
netty.server.soTimeout=${netty.server.soTimeout}
#socket缓冲区大小
netty.server.socketBufferSize=${netty.server.socketBufferSize}
#使用EPOLL，只支持Linux模式
netty.server.epoll=${netty.server.epoll}
#协议packet最大值
netty.server.frameMaxSize=${netty.server.frameMaxSize}
#内存分配器
netty.server.allocatorFactory=${netty.server.allocatorFactory}
#表示是否允许重用Socket所绑定的本地地址
netty.server.reuseAddress=true
#关闭时候，对未发送数据包等待时间(秒)，-1,0:禁用,丢弃未发送的数据包>0，等到指定时间，如果还未发送则丢弃
netty.server.soLinger=-1
#启用nagle算法，为真立即发送，否则得到确认或缓冲区满发送
netty.server.tcpNoDelay=true
#保持活动连接，定期心跳包
netty.server.keepAlive=true

####################### Netty Client ##################################################
#连接池大小
netty.client.poolSize=${netty.client.poolSize}
#IO线程数, 0=cpu num, -1=共用serverIO线程
netty.client.ioThreads=${netty.client.ioThreads}
#连接超时(毫秒)
netty.client.connTimeout=${netty.client.connTimeout}
#默认发送数据包超时时间(毫秒)
netty.client.sendTimeout=${netty.client.sendTimeout}
#socket读超时时间(毫秒)
netty.client.soTimeout=${netty.client.soTimeout}
#通道最大空闲时间(毫秒)
netty.client.maxIdle=${netty.client.maxIdle}
#心跳间隔(毫秒)
netty.client.heartbeat=${netty.client.heartbeat}
#socket缓冲区大小
netty.client.socketBufferSize=${netty.client.socketBufferSize}
#协议packet最大值
netty.client.frameMaxSize=${netty.client.frameMaxSize}
#使用EPOLL，只支持Linux模式
netty.client.epoll=${netty.client.epoll}
#内存分配器
netty.client.allocatorFactory=${netty.client.allocatorFactory}
#关闭时候，对未发送数据包等待时间(秒)，-1,0:禁用,丢弃未发送的数据包>0，等到指定时间，如果还未发送则丢弃
netty.client.soLinger=-1
#启用nagle算法，为真立即发送，否则得到确认或缓冲区满发送
netty.client.tcpNoDelay=true
#保持活动连接，定期心跳包
netty.client.keepAlive=true
